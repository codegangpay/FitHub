<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.fithub.admin.model.dao.AdminDao">
	<select id="memberList" resultType="member">
		select * from (select rownum as rnum, m.* from (select * from member order by 1 desc) m) where rnum between #{start} and #{end}
	</select>
	<select id="delMemberList" resultType="delMember">
		select * from (select rownum as rnum, d.* from (select * from del_member order by 1 desc) d) where rnum between #{start} and #{end}
	</select>
	<select id="communityList" resultType="community">
		select * from (select rownum as rnum, r.* from (select c.*, (select m.member_id from member m where m.member_no = c.member_no) as member_id from community c order by 1 desc) r) where rnum between #{start} and #{end}
	</select>
	<select id="commentList" resultType="comment">
		select * from (select rownum as rnum, r.* from (select c.*, (select m.member_id from member m where m.member_no = c.member_no) as member_id from comment_tbl c order by 1 desc) r) where rnum between #{start} and #{end}
	</select>
	
	<select id="memberTotalCount" resultType="int">
		select count(*) from member
	</select>
	<select id="delMemberTotalCount" resultType="int">
		select count(*) from del_member
	</select>
	<select id="communityTotalCount" resultType="int">
		select count(*) from community
	</select>
	<select id="commnetTotalCount" resultType="int">
		select count(*) from comment_tbl
	</select>
	
	<update id="adminMemberChange">
		update member set
		<choose>
			<when test="memberLevel > 0">
				member_level = #{memberLevel}
			</when>
			<when test="warningLevel > 0">
				warning_level = #{warningLevel}
			</when>
		</choose>
		where member_id = #{memberId}
	</update>
	
	<insert id="writeAds">
		insert into ads_tbl values(ads_seq.nextval, #{adsName}, #{adsImg}, #{adsLink}, #{adsType}, to_char(sysdate, 'yyyy-mm-dd'))
	</insert>
	
	<select id="getAdsList" resultType="ads">
		select * from ads_tbl order by 1
	</select>
	
	<select id="getAdsType" resultType="ads">
		select * from ads_tbl where ads_type = #{adsType} order by 1
	</select>
	
	<select id="getMember" resultType="admin">
    	SELECT 
  (SELECT COUNT(*) FROM member WHERE member_level = 2) AS member_count,
  (SELECT COUNT(*) FROM member WHERE member_level = 1) AS admin_count,
  (SELECT COUNT(*) FROM del_member) AS del_member_count,
  (SELECT COUNT(*) FROM member WHERE warning_level = 3) AS kick_member_count
FROM dual
    </select>
    
    <select id="selectOneMember">
    	select * from member where member_no = #{memberNo}
    </select>
    
    <insert id="adminDelMemberInsert">
    	insert into del_member values(#{memberNo}, #{memberId}, #{memberEmail}, #{joinDate}, to_char(sysdate, 'yyyy-mm-dd'), null, #{adminId})
    </insert>
    
    <delete id="adminMemberDelete">
    	delete from member where member_no = #{memberNo}
    </delete>
    
    <select id="categoryTotalPrice" resultType="sell">
    	select goods_category, sum(s.goods_total_price) as category_total_price from sell s join goods g on s.goods_no = g.goods_no group by goods_category order by goods_category
    </select>
    
    <select id="totalSell" resultType="sell">
    	select count(*) as total_sell, goods_name from sell group by goods_name order by total_sell desc
    </select>
    
    <select id="weekSales" resultType="sell">
  WITH date_range AS (
  SELECT TO_CHAR(TRUNC(SYSDATE) - LEVEL + 1, 'YYYY-MM-DD') AS sale_date
  FROM dual
  CONNECT BY LEVEL &lt;= 7
),
sales_data AS (
  SELECT TO_CHAR(sell_date, 'YYYY-MM-DD') AS sale_date,
         SUM(goods_total_price) AS total_week_price
  FROM sell
  WHERE sell_date >= TRUNC(SYSDATE) - 6 AND sell_date &lt; TRUNC(SYSDATE) + 1
  GROUP BY TO_CHAR(sell_date, 'YYYY-MM-DD')
)
SELECT
  d.sale_date,
  NVL(s.total_week_price, 0) AS total_week_price
FROM
  date_range d
LEFT JOIN
  sales_data s ON d.sale_date = s.sale_date
ORDER BY
  d.sale_date
</select>
    
    <select id="monthSales" resultType="sell">
  WITH date_range AS (
  SELECT TRUNC(SYSDATE, 'MM') + LEVEL - 1 AS sale_date
  FROM dual
  CONNECT BY TRUNC(SYSDATE, 'MM') + LEVEL - 1 &lt;= TRUNC(SYSDATE)
),
sales_data AS (
  SELECT TRUNC(sell_date) AS sale_date,
         SUM(goods_total_price) AS total_month_price
  FROM sell
  WHERE sell_date >= TRUNC(SYSDATE, 'MM') AND sell_date &lt; TRUNC(SYSDATE) + 1
  GROUP BY TRUNC(sell_date)
)
SELECT
  TO_CHAR(d.sale_date, 'YYYY-MM-DD') AS sale_date,
  NVL(s.total_month_price, 0) AS total_month_price
FROM
  date_range d
LEFT JOIN
  sales_data s ON d.sale_date = s.sale_date
ORDER BY
  d.sale_date
</select>

	
</mapper>
